{"version":3,"file":"static/js/986.62de2231.chunk.js","mappings":"sNACA,EAAuB,wBAAvB,EAAuD,yBAAvD,EAAwF,yBAAxF,EAA0H,0B,mBCoD1H,EA/CkB,WAChB,IAAMA,GAAWC,EAAAA,EAAAA,MAEXC,GAAeC,EAAAA,EAAAA,SAAOC,EAAAA,EAAAA,OACtBC,GAAkBF,EAAAA,EAAAA,SAAOC,EAAAA,EAAAA,OAc/B,OACE,kBAAME,UAAWC,EAAUC,SAbR,SAAAC,GACnBA,EAAEC,iBACF,IAAMC,EAAOF,EAAEG,cACfZ,GACEa,EAAAA,EAAAA,IAAM,CACJC,MAAOH,EAAKI,SAASD,MAAME,MAC3BC,SAAUN,EAAKI,SAASE,SAASD,SAGrCL,EAAKO,OACN,EAGoDC,aAAa,MAAhE,WACE,kBAAOC,QAASlB,EAAamB,QAASf,UAAWC,EAAjD,SAA4D,WAG5D,kBACEe,GAAIpB,EAAamB,QACjBf,UAAWC,EACXgB,KAAK,QACLC,KAAK,WAGP,kBAAOJ,QAASf,EAAgBgB,QAASf,UAAWC,EAApD,SAA+D,cAG/D,kBACEe,GAAIjB,EAAgBgB,QACpBf,UAAWC,EACXgB,KAAK,WACLC,KAAK,cAGP,mBAAQlB,UAAWC,EAAYgB,KAAK,SAApC,SAA6C,aAKlD,E,8BC7BD,EAhBkB,WAChB,IAAME,GAAWC,EAAAA,EAAAA,MAOjB,OANmBC,EAAAA,EAAAA,IAAYC,EAAAA,KAG7BH,EAAS,YAAa,CAACI,SAAS,KAIhC,iCACE,eAAIvB,UAAWC,EAAAA,EAAAA,SAAf,SAA6B,YAC7B,SAAC,EAAD,MAGL,C,qBCnBD,KAAgB,IAAM,iBAAiB,SAAW,sBAAsB,MAAQ,mBAAmB,KAAO,kB,wDCAnG,IAkBIH,EAAS,eAAC0B,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACZ,EAAIa,GAWvD,OAREb,IAFFa,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGT,GAAE,GAbe,C","sources":["webpack://react-homework-template/./src/components/LoginForm/LoginForm.module.css?4ac5","components/LoginForm/LoginForm.jsx","pages/LoginPage.jsx","webpack://react-homework-template/./src/components/App/App.module.css?583a","../node_modules/nanoid/index.browser.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form\":\"LoginForm_form__gPEx5\",\"label\":\"LoginForm_label__F7sLE\",\"input\":\"LoginForm_input__aQRtt\",\"button\":\"LoginForm_button__LodJg\"};","import { useDispatch } from 'react-redux';\nimport { useRef } from 'react';\nimport { nanoid } from 'nanoid';\nimport css from './LoginForm.module.css';\nimport { logIn } from 'Redux/auth/operations';\n\nconst LoginForm = () => {\n  const dispatch = useDispatch();\n\n  const emailInputId = useRef(nanoid());\n  const passwordInputId = useRef(nanoid());\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const form = e.currentTarget;\n    dispatch(\n      logIn({\n        email: form.elements.email.value,\n        password: form.elements.password.value,\n      })\n    );\n    form.reset();\n  };\n\n  return (\n    <form className={css.form} onSubmit={handleSubmit} autoComplete=\"off\">\n      <label htmlFor={emailInputId.current} className={css.label}>\n        Email\n      </label>\n      <input\n        id={emailInputId.current}\n        className={css.input}\n        type=\"email\"\n        name=\"email\"\n      />\n\n      <label htmlFor={passwordInputId.current} className={css.label}>\n        Password\n      </label>\n      <input\n        id={passwordInputId.current}\n        className={css.input}\n        type=\"password\"\n        name=\"password\"\n      />\n\n      <button className={css.button} type=\"submit\">\n        Log In\n      </button>\n    </form>\n  );\n};\n\nexport default LoginForm;\n","import LoginForm from 'components/LoginForm/LoginForm';\nimport { useNavigate } from 'react-router-dom';\nimport css from 'components/App/App.module.css';\nimport { useSelector } from 'react-redux';\nimport { selectIsLoggedIn } from 'Redux/auth/selectors';\n\nconst LoginPage = () => {\n  const navigate = useNavigate();\n  const isLoggedIn = useSelector(selectIsLoggedIn);\n\n  if (isLoggedIn) {\n    navigate(\"/contacts\", {replace: true})\n  }\n\n  return (\n    <>\n      <h1 className={css.appTitle}>Log in</h1>\n      <LoginForm />\n    </>\n  );\n};\n\nexport default LoginPage;\n","// extracted by mini-css-extract-plugin\nexport default {\"app\":\"App_app__6Ra7L\",\"appTitle\":\"App_appTitle__R-ohI\",\"title\":\"App_title__zQTwp\",\"info\":\"App_info__qU+g4\"};","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["dispatch","useDispatch","emailInputId","useRef","nanoid","passwordInputId","className","css","onSubmit","e","preventDefault","form","currentTarget","logIn","email","elements","value","password","reset","autoComplete","htmlFor","current","id","type","name","navigate","useNavigate","useSelector","selectIsLoggedIn","replace","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}