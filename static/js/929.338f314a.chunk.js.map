{"version":3,"file":"static/js/929.338f314a.chunk.js","mappings":"qNACA,EAAuB,2BAAvB,EAA0D,4BAA1D,EAA8F,4BAA9F,EAAmI,6B,mBCsEnI,EAjEqB,WACrB,IAAMA,GAAWC,EAAAA,EAAAA,MAETC,GAAcC,EAAAA,EAAAA,SAAOC,EAAAA,EAAAA,OACrBC,GAAeF,EAAAA,EAAAA,SAAOC,EAAAA,EAAAA,OACtBE,GAAkBH,EAAAA,EAAAA,SAAOC,EAAAA,EAAAA,OAe/B,OACE,kBAAMG,UAAWC,EAAUC,SAdV,SAAAC,GACnBA,EAAEC,iBACF,IAAMC,EAAOF,EAAEG,cACfb,GACEc,EAAAA,EAAAA,IAAS,CACPC,KAAMH,EAAKI,SAASD,KAAKE,MACzBC,MAAON,EAAKI,SAASE,MAAMD,MAC3BE,SAAUP,EAAKI,SAASG,SAASF,SAGrCL,EAAKQ,OACN,EAGsDC,aAAa,MAAhE,WACE,kBAAOC,QAASpB,EAAYqB,QAAShB,UAAWC,EAAhD,SAA2D,cAG3D,kBACEgB,GAAItB,EAAYqB,QAChBhB,UAAWC,EACXiB,KAAK,OACLV,KAAK,OACLW,QAAQ,kCACRC,MAAM,yIACNC,UAAQ,KAGV,kBAAON,QAASjB,EAAakB,QAAShB,UAAWC,EAAjD,SAA4D,WAG5D,kBACEgB,GAAInB,EAAakB,QACjBhB,UAAWC,EACXiB,KAAK,QACLV,KAAK,QACLa,UAAQ,KAGV,kBAAON,QAAShB,EAAgBiB,QAAShB,UAAWC,EAApD,SAA+D,cAG/D,kBACEgB,GAAIlB,EAAgBiB,QACpBhB,UAAWC,EACXiB,KAAK,WACLV,KAAK,WACLc,UAAU,IACVD,UAAQ,KAGV,mBAAQrB,UAAWC,EAAYiB,KAAK,SAApC,SAA6C,eAKlD,E,8BChDD,EAfqB,WAGlB,OAFmBK,EAAAA,EAAAA,IAAYC,EAAAA,KAGtB,SAAC,KAAD,CAAUC,GAAG,YAAYC,SAAO,KAIxC,iCACE,eAAI1B,UAAWC,EAAAA,EAAAA,SAAf,SAA6B,cAC7B,SAAC,EAAD,MAGL,C,qBClBD,KAAgB,IAAM,iBAAiB,SAAW,sBAAsB,MAAQ,mBAAmB,KAAO,kB,wDCAnG,IAkBIJ,EAAS,eAAC8B,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACd,EAAIe,GAWvD,OAREf,IAFFe,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGT,GAAE,GAbe,C","sources":["webpack://react-homework-template/./src/components/RegisterForm/RegisterForm.module.css?a5d4","components/RegisterForm/RegisterForm.jsx","pages/RegisterPage.jsx","webpack://react-homework-template/./src/components/App/App.module.css?583a","../node_modules/nanoid/index.browser.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form\":\"RegisterForm_form__Tv43W\",\"label\":\"RegisterForm_label__4pTXF\",\"input\":\"RegisterForm_input__FsgBz\",\"button\":\"RegisterForm_button__B3hFq\"};","import { useDispatch } from 'react-redux';\nimport { useRef } from 'react';\nimport { nanoid } from 'nanoid';\nimport css from './RegisterForm.module.css';\nimport { register } from 'Redux/auth/operations';\n\nconst RegisterForm = () => {\nconst dispatch = useDispatch();\n\n  const nameInputId = useRef(nanoid());\n  const emailInputId = useRef(nanoid());\n  const passwordInputId = useRef(nanoid());\n\nconst handleSubmit = e => {\n  e.preventDefault();\n  const form = e.currentTarget;\n  dispatch(\n    register({\n      name: form.elements.name.value,\n      email: form.elements.email.value,\n      password: form.elements.password.value,\n    })\n  );\n  form.reset();\n};\n\n  return (\n    <form className={css.form} onSubmit={handleSubmit} autoComplete=\"off\">\n      <label htmlFor={nameInputId.current} className={css.label}>\n        Username\n      </label>\n      <input\n        id={nameInputId.current}\n        className={css.input}\n        type=\"text\"\n        name=\"name\"\n        pattern=\"^[A-Za-z\\u0080-\\uFFFF\\- ']+$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n      />\n\n      <label htmlFor={emailInputId.current} className={css.label}>\n        Email\n      </label>\n      <input\n        id={emailInputId.current}\n        className={css.input}\n        type=\"email\"\n        name=\"email\"\n        required\n      />\n\n      <label htmlFor={passwordInputId.current} className={css.label}>\n        Password\n      </label>\n      <input\n        id={passwordInputId.current}\n        className={css.input}\n        type=\"password\"\n        name=\"password\"\n        minLength=\"8\"\n        required\n      />\n\n      <button className={css.button} type=\"submit\">\n        Register\n      </button>\n    </form>\n  );\n};\n\nexport default RegisterForm;\n","import RegisterForm from 'components/RegisterForm/RegisterForm';\nimport { Navigate } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\nimport css from 'components/App/App.module.css'\nimport { selectIsLoggedIn } from 'Redux/auth/selectors';\n\nconst RegisterPage = () => {\n   const isLoggedIn = useSelector(selectIsLoggedIn);\n\n   if (isLoggedIn) {\n     return <Navigate to=\"/contacts\" replace />;\n   }\n\n  return (\n    <>\n      <h1 className={css.appTitle}>Register</h1>\n      <RegisterForm />\n    </>\n  );\n};\n\nexport default RegisterPage;\n","// extracted by mini-css-extract-plugin\nexport default {\"app\":\"App_app__6Ra7L\",\"appTitle\":\"App_appTitle__R-ohI\",\"title\":\"App_title__zQTwp\",\"info\":\"App_info__qU+g4\"};","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["dispatch","useDispatch","nameInputId","useRef","nanoid","emailInputId","passwordInputId","className","css","onSubmit","e","preventDefault","form","currentTarget","register","name","elements","value","email","password","reset","autoComplete","htmlFor","current","id","type","pattern","title","required","minLength","useSelector","selectIsLoggedIn","to","replace","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}