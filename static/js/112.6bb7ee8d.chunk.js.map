{"version":3,"file":"static/js/112.6bb7ee8d.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/ContactForm/ContactForm.module.css?b5b2","Redux/contacts/selectors.js","js/notifyFunc.js","components/ContactForm/ContactForm.jsx","webpack://react-homework-template/./src/components/ContactItem/ContactItem.module.css?be2b","components/ContactItem/ContactItem.jsx","webpack://react-homework-template/./src/components/ContactList/ContactList.module.css?1ce0","Redux/filter/selectors.js","components/ContactList/ContactList.jsx","webpack://react-homework-template/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","webpack://react-homework-template/./src/components/App/App.module.css?583a","pages/ContactsPage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactForm_form__dhl+T\",\"label\":\"ContactForm_label__-cVXI\",\"input\":\"ContactForm_input__Bl93P\",\"button\":\"ContactForm_button__eSwX9\"};","const selectContacts = state => state.contacts;\n\nexport {selectContacts}\n","import { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport { Report } from 'notiflix/build/notiflix-report-aio';\n\nconst notifyFailure = (message, timeout) =>\n  Notify.failure(message, { timeout: timeout });\n\nconst notifySuccsess = (message, timeout) =>\n  Notify.success(message, { timeout: timeout });\n\nconst notifyInfo = (message, timeout) =>\n  Notify.info(message, { timeout: timeout });\n\nconst reportSuccsess = (\n  message,\n  title = 'Succsess!',\n  buttonCaption = 'Okay'\n) => {\n  Report.success(title, message, buttonCaption);\n};\n\nconst reportFailur = (message, buttonCaption = 'Okay', title = 'Failure!') => {\n  Report.failure(title, message, buttonCaption);\n};\n\nconst reportInfo = (message, buttonCaption = 'Okay', title = 'Info!') => {\n  Report.info(title, message, buttonCaption);\n};\n\nconst reportWarning = (message, buttonCaption = 'Okay', title = 'Warning!') => {\n  Report.init({\n    warning: { buttonColor: '#000' },\n  });\n  Report.warning(title, message, buttonCaption);\n};\n\n/**\n * Displays the corresponding message on the screen\n * @param {string} message\n * @param {string} type\n * @param {number} timeout\n */\nconst showNotify = (message = 'Message!', type = 'info', timeout = 3000) => {\n  switch (type) {\n    case 'succsess':\n      notifySuccsess(message, timeout);\n      break;\n    case 'failure':\n      notifyFailure(message, timeout);\n      break;\n    case 'info':\n      notifyInfo(message, timeout);\n      break;\n    default:\n      throw new Error('This type of message is not supported!');\n  }\n};\n\n/**\n * Displays the corresponding report message on the screen\n * @param {string} message\n * @param {string} title\n * @param {string} buttonCaption\n */\nconst showNotifyReport = (\n  message = 'Message',\n  type = 'reportInfo',\n  buttonCaption = 'Okay'\n) => {\n  switch (type) {\n    case 'reportSuccsess':\n      reportSuccsess(message, buttonCaption);\n      break;\n    case 'reportFailure':\n      reportFailur(message, buttonCaption);\n      break;\n    case 'reportInfo':\n      reportInfo(message, buttonCaption);\n      break;\n    case 'reportWarning':\n      reportWarning(message, buttonCaption);\n      break;\n    default:\n      throw new Error('This type of message is not supported!');\n  }\n};\n\nexport { showNotify, showNotifyReport };\n","import { useState, useRef } from 'react';\nimport { nanoid } from 'nanoid';\nimport css from './ContactForm.module.css';\nimport { addContact } from 'Redux/contacts/operations';\nimport { selectContacts } from 'Redux/contacts/selectors';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { showNotifyReport } from 'js/notifyFunc';\n\nconst ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const nameInputId = useRef(nanoid());\n  const numberInputId = useRef(nanoid());\n\n  const { items } = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    items.some(\n      ({ name: contactName }) =>\n        contactName.toLowerCase() === name.toLowerCase()\n    )\n      ? showNotifyReport(`${name} is already in contact`, 'reportWarning')\n      : dispatch(addContact({ id: nanoid(), name, number }));\n\n    reset();\n  };\n\n  const handleChange = ({ target: { name, value } }) => {\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form className={css.form} onSubmit={handleSubmit}>\n      <label htmlFor={nameInputId.current} className={css.label}>\n        Name\n      </label>\n      <input\n        type=\"text\"\n        name=\"name\"\n        id={nameInputId.current}\n        pattern=\"^[A-Za-z\\u0080-\\uFFFF\\- ']+$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n        className={css.input}\n        onChange={handleChange}\n        value={name}\n      />\n\n      <label htmlFor={numberInputId.current} className={css.label}>\n        Number\n      </label>\n      <input\n        type=\"tel\"\n        name=\"number\"\n        id={numberInputId.current}\n        pattern=\"^(\\+?[0-9.\\(\\)\\-\\s]*)$\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        required\n        className={css.input}\n        onChange={handleChange}\n        value={number}\n      />\n\n      <button type=\"submit\" className={css.button}>\n        Add contact\n      </button>\n    </form>\n  );\n};\n\nexport default ContactForm;\n","// extracted by mini-css-extract-plugin\nexport default {\"contactItem\":\"ContactItem_contactItem__Z4FuP\",\"caption\":\"ContactItem_caption__9hsJU\",\"button\":\"ContactItem_button__IRFBz\"};","import PropTypes from 'prop-types';\nimport { FaTrash } from 'react-icons/fa';\nimport css from './ContactItem.module.css';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'Redux/contacts/operations';\n\nconst ContactItem = ({ name, number, contactId }) => {\n  const dispatch = useDispatch();\n\n  return (\n    <li className={css.contactItem}>\n      <div>\n        <p className={css.caption}>Name: {name}</p>\n        <p className={css.caption}>Number: {number}</p>\n      </div>\n\n      <button\n        type=\"button\"\n        className={css.button}\n        onClick={() => dispatch(deleteContact(contactId))}\n      >\n        <FaTrash />\n      </button>\n    </li>\n  );\n};\n\nContactItem.propTypes = {\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  contactId: PropTypes.string.isRequired,\n};\n\nexport default ContactItem;\n","// extracted by mini-css-extract-plugin\nexport default {\"contactList\":\"ContactList_contactList__UFVCg\"};","const selectFilter = state => state.filter;\n\nexport {selectFilter}","import ContactItem from '../ContactItem';\nimport css from './ContactList.module.css';\nimport { useSelector } from 'react-redux';\nimport { selectContacts } from 'Redux/contacts/selectors';\nimport { selectFilter } from 'Redux/filter/selectors';\n\nconst ContactList = () => {\n  const { items } = useSelector(selectContacts);\n  const filter = useSelector(selectFilter);\n\n  return (\n    <ul className={css.contactList}>\n      {items\n        .filter(({ name }) => name.toLowerCase().includes(filter.toLowerCase()))\n        .map(({ id, name, number }) => (\n          <ContactItem key={id} name={name} number={number} contactId={id} />\n        ))}\n    </ul>\n  );\n};\n\nexport default ContactList;\n","// extracted by mini-css-extract-plugin\nexport default {\"filterBox\":\"Filter_filterBox__A-UPt\",\"label\":\"Filter_label__vEd1E\",\"input\":\"Filter_input__N7T3z\"};","import { useRef } from 'react';\nimport css from './Filter.module.css';\nimport { nanoid } from 'nanoid';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { changeFilter } from 'Redux/filter/filterSlice';\nimport { selectFilter } from 'Redux/filter/selectors';\n\nconst Filter = () => {\n  const filterInputId = useRef(nanoid());\n\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n\n  const handleChangeFilter = ({ target: { value } }) =>\n    dispatch(changeFilter(value));\n\n  return (\n    <div className={css.filterBox}>\n      <label htmlFor={filterInputId.current} className={css.label}>\n        Find contacts by name\n      </label>\n      <input\n        type=\"text\"\n        name=\"filter\"\n        id={filterInputId.current}\n        pattern=\"^[A-Za-z\\u0080-\\uFFFF\\- ']+$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n        className={css.input}\n        onChange={handleChangeFilter}\n        value={filter}\n      />\n    </div>\n  );\n};\n\nexport default Filter;\n","// extracted by mini-css-extract-plugin\nexport default {\"app\":\"App_app__6Ra7L\",\"appTitle\":\"App_appTitle__R-ohI\",\"title\":\"App_title__zQTwp\",\"info\":\"App_info__qU+g4\"};","import { useEffect } from 'react';\nimport ContactForm from 'components/ContactForm/ContactForm';\nimport ContactList from 'components/ContactList/ContactList';\nimport Filter from 'components/Filter/Filter';\nimport css from 'components/App/App.module.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from 'Redux/contacts/selectors';\nimport { fetchContacts } from 'Redux/contacts/operations';\n\nconst ContactsPage = () => {\n  const dispatch = useDispatch();\n  const { items, isLoading, error } = useSelector(selectContacts);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <div className={css.app}>\n      <h1 className={css.appTitle}>Phonebook</h1>\n\n      <ContactForm />\n\n      <h2 className={css.title}>Contacts:</h2>\n\n      <Filter />\n\n      {isLoading && <p className={css.info}>Loading...</p>}\n\n      {error && <p className={css.info}>{error}</p>}\n\n      {!error && !isLoading && !items.length ? (\n        <p className={css.info}>The contact list is empty!</p>\n      ) : (\n        <ContactList />\n      )}\n    </div>\n  );\n};\n\nexport default ContactsPage;\n"],"names":["selectContacts","state","contacts","reportSuccsess","message","title","buttonCaption","Report","reportFailur","reportInfo","reportWarning","warning","buttonColor","useState","name","setName","number","setNumber","nameInputId","useRef","nanoid","numberInputId","items","useSelector","dispatch","useDispatch","handleChange","target","value","reset","className","css","onSubmit","event","preventDefault","some","toLowerCase","Error","showNotifyReport","addContact","id","htmlFor","current","type","pattern","required","onChange","contactId","onClick","deleteContact","selectFilter","filter","includes","map","filterInputId","changeFilter","isLoading","error","useEffect","fetchContacts","length"],"sourceRoot":""}